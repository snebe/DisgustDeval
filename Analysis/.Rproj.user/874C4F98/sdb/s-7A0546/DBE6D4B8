{
    "contents" : "##This script extracts and summarises Instrumental training data from the Disgust Devaluation Task. \n##Before you run this you need:\n#The log files for each participant in the 'R/data/instru' folder\n#Participant log files all named '(whateveryouridsis)_instru.log'\n\n#-if you try to run this without the appropriate packages installed it wont work\n#-you can use install.packages() to download these\n#-this may take a bit of fiddling if your uni's firewall doesn't like you doing this\n#You will need to create individual participant ID vectors in the 'R/functions.R' script \n\nlibrary(ggplot2)\nlibrary(reshape2)\nlibrary(stringr)\nsource(\"R/functions.R\") #this loads the functions that will be needed for analysis\n\n\n#Create a list of all of the participant info vectors\nID <- list(ID001_i, ID002_i)\n\n#Create the empty vectors that will be filled with the data extracted from each participant. \n\nparticipant <- character(length = length(ID))  # creates a vector that will be filled with participant IDs\ninstru_measures <- c(\"r1total\", \"r2total\", \"o1won\", \"o2won\", \"totalWon\", \"o1rating\", \"o2rating\", \"o3rating\", \"hunger\")\nemptymeasures <- vector(\"list\", length(instru_measures)) #create a list for each training measure\nnames(emptymeasures) <- instru_measures #give each item in the list names\n\nemptymeasures <- lapply(emptymeasures, createVector, y=ID) #for each measure, create an empty vector the length of the # of participants\n\n#Loop through the data extraction for each particpant\n\nfor(i in ID){\n  data <- read.delim(i[[1]], header = FALSE) #uses the path in the participant ID vector to read the log file\n  version <- i[[2]] #looks for the version in the second item of the participant vector\n  \n  #give the data column headings\n  colnames(data) <- c(\"time\", \"type\", \"text\")\n  \n  #find the time that each left and right response was made\n  #this subsets the time column for each row where a left or right keypress is made\n  #IF YOU CHANGE KEYS FOR LEFT AND RIGHT YOU WILL NEED TO CHANGE THIS \n  \n  i.r1times <- findTime(\"Keypress: t\") #left is always R1\n  i.r2times <- findTime(\"Keypress: v\") #right is always R2\n  \n  #Count the number of responses on each action\n  i.r1total <- length(i.r1times)\n  i.r2total <- length(i.r2times)\n  \n  #find the times that each left and right outcome was made\n  i.o1times <- findTime(\"win A\")\n  i.o2times <- findTime(\"win B\")\n  \n  #Count the number of snacks won\n  i.o1won <- length(i.o1times)\n  i.o2won <- length(i.o2times)\n  \n  #Total number of snacks won\n  i.totalWon <- i.o1won + i.o2won\n  \n  ##Extract the ratings for each of the three Snacks. \n  #string for the outcome rating\n  #searches the text logs of data for any rows that containg the rating scale for that snack\n  #this spits out three rows\n  #we only care about the first row which contains the numerical rating [1,x]\n  #we only are about the third column in that row, which contains the text log [1,3]\n  #gsub extracts the numerical rating that participants give\n  #Rating between 1-7\n  # 1: Most Unpleasant\n  # 7: Most Pleasant\n  \n  i.hunger <- as.numeric( # convert string to numeric\n    gsub(\"[^0-9]\", #any matching numbers within the string\n         \"\", \n         data[grep(\"RatingScale Hunger_rating:\", data$text),][1,3]) #string for the outcome rating\n  )\n  \n  ttRating <- as.numeric( # convert string to numeric\n    gsub(\"[^0-9]\", #any matching numbers within the string\n         \"\", \n         data[grep(\"RatingScale teddy_rating:\", data$text),][1,3]) #string for the outcome rating\n  )\n  \n  mmRating <- as.numeric( # convert string to numeric\n    gsub(\"[^0-9]\", #any matching numbers within the string\n         \"\", \n         data[grep(\"RatingScale MM_rating:\", data$text),][1,3]) #string for the outcome rating\n  )\n  \n  bbqRating  <- as.numeric( # convert string to numeric\n    gsub(\"[^0-9]\", #any matching numbers within the string\n         \"\", \n         data[grep(\"RatingScale BBQ_rating:\", data$text),][1,3]) #string for the outcome rating\n  )\n  \n  ##Counterbalancing for version used\n  #O1 <- outcome earned by R1 response\n  #O2 <- outcome earned by R2 response\n  #O3 <- outcome not associated with any instrumental responses\n  if(version == \"A\"){\n    i.o1rating <- mmRating\n    i.o2rating <- bbqRating\n    i.o3rating <- ttRating\n  } else if(version == \"B\"){\n    i.o1rating <- bbqRating\n    i.o2rating <- mmRating\n    i.o3rating <- ttRating\n  } else if(version == \"C\"){\n    i.o1rating <- ttRating\n    i.o2rating <- bbqRating\n    i.o3rating <- mmRating\n  } else if(version == \"D\"){\n    i.o1rating <- bbqRating\n    i.o2rating <- ttRating\n    i.o3rating <- mmRating\n  } else if(version == \"E\"){\n    i.o1rating <- mmRating\n    i.o2rating <- ttRating\n    i.o3rating <- bbqRating\n  } else if(version == \"F\"){\n    i.o1rating <- ttRating\n    i.o2rating <- mmRating\n    i.o3rating <- bbqRating\n  } else {\n    \"Invalid Version Selected\"\n  }\n  \n  #Insert individual participant values into the empty vectors created\n  #for each cue type, inset the value of the participant into the row that corresponses with their participant number\n  participant[as.numeric(i[4])] <- i[[3]] # insert participant ID code into vector\n  for(j in instru_measures){\n    emptymeasures[[j]][[as.numeric(i[4])]] <- get(paste0(\"i.\", j))\n  }\n  \n}\n\n#Create a data frame of the group data from instrumental training\ninstru.df <- as.data.frame(emptymeasures) #dataframe from list\nwide.instru.df <- data.frame(participant, emptymeasures) #group data frame with participant IDs\n\n#Set directory for output\ndir.output <- 'R/output/data/instru'\n\n#Export group data\nwrite.csv(wide.instru.df, file = file.path(dir.output, \"group_instruData.csv\"), row.names = FALSE)\n\n",
    "created" : 1457667583842.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3381847055",
    "id" : "DBE6D4B8",
    "lastKnownWriteTime" : 1457664702,
    "path" : "~/DisgustDeval/Analysis/instru_analysis.R",
    "project_path" : "instru_analysis.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}